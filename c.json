{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	/* Annotation */
	"ifndef": {
		"prefix": "/if",
		"body": [
		  "#ifndef __${TM_FILENAME_BASE}_H",
		  "#define __${TM_FILENAME_BASE}_H ",
		  "",
		  "#include <stdint.h>",
		  "",
		  "#endif // !__USER_H"
		],
		"description": "ifndef"
	  },
	"head": {
		"prefix": "/head",
		"body": [
			"/*",
			" * @Description: $1",
			" * @Author: $2",
			" * @Date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}",
			" * @Path: ${TM_FILEPATH}",
			" */",
		],
		"description": "Output for"
	},
	"func": {
		"prefix": "/func",
		"body": [
			" /**",
			" * @description: ",
			" * @param:  ",
			" * @return: ",
			" * @note: ",
			" */",
			"void ${TM_FILENAME_BASE}_$1($2)",
			"{",
				"\t$3",
			"}"
		],
		"description": "Output for"
	},
	/* Code */
	"for": {
		"prefix": "codefor",
		"body": [
			"for(uint8_t i = 0; i < $1; i++)",
			"{",
				"\t$2",
			"}"
		],
		"description": "Output for"
	},
	"if": {
		"prefix": "codeif",
		"body": [
			"if($1)",
			"{",
				"\t$2",
			"}"
		],
		"description": "Output if"
	},
	"switch": {
		"prefix": "codeswitch",
		"body": [
			"switch($1)",
			"{",
				"\tcsse $2:",
				"\t break;",
				"\tdefault:",
				"\t break;",
			"}"
		],
		"description": "Output switch"
	},
	"while": {
		"prefix": "codewhile",
		"body": [
			"while(1)",
			"{",
				"\t$1",
			"}"
		],
		"description": "Output while"
	},
	"printf": {
		"prefix": "codeprintf",
		"body": [
			"printf(\"$1\"$2);"
		],
		"description": "Output printf"
	},
}